# -*- coding: utf-8 -*-
"""NWH130.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11piiNAdvH-vCdhIyHjn6uNTgK2OdOUN_
"""

!pip install tabula-py

"""Two dataset have been providing to extract data and one data is in pdf form. hence, !pip install tabula-py is used to import the pdf file in the software package tool."""

import tabula
from tabula.io import read_pdf

"""The above basic library helps in reading the provided pdf file"""

import pandas as pd
from numpy import *
import numpy as np
import seaborn as sns
from tabula.io import convert_into
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

"""Seaborn and Matplotlib have been used to visualise the dataset. Panda has been used to import the essential excel file and numpy has been used to preserve the numerical calculation.

Task 1: Loan Data Automation
"""

credo_pdf = tabula.io.read_pdf("/content/CREDO_Loans_Database_Table .pdf", pages='all')[0]

credo_pdf.head()

credo_pdf.info()

"""Merging the excel and pdf data"""

tabula.convert_into("/content/CREDO_Loans_Database_Table .pdf", "pdf_credo.csv", output_format="csv", pages='all')

credo_pdf_df = pd.read_csv('pdf_credo.csv')

credo_excel = pd.read_excel('CREDO Loan Data.xlsx')

credo_excel.head()

credo_excel.info()

"""Merging the excel and pdf data"""

credo_marge = [credo_excel, credo_pdf]

credo_df = pd.concat(credo_marge)

credo_df.head()

credo_df.info()

"""Checking duplicate values in the dataset"""

sum(credo_df.duplicated())

"""Descriptive statistics"""

credo_df.describe()

"""Identifying the outliers of the dataset"""

fig = plt.figure(figsize =(8, 6))
sns.boxplot(credo_df,color="BLUE")
plt.show()

"""Determining the data distribution of loan amount"""

import plotly.express as px
fig = px.histogram(credo_df, x='LoanAmount', color_discrete_sequence=['green'], title="Loan Amount Distribution")
fig.update_traces(marker_line_color='blue', marker_line_width=1)
fig.show()

"""Data Visualisation"""

import plotly.express as px
fig = px.histogram(credo_df, x='Loan_Status', color='Loan_Status', color_discrete_sequence=px.colors.sequential.Plasma, title="Loan Status Count")
fig.update_traces(marker_line_color='orange', marker_line_width=1)
fig.show()

import plotly.express as px
fig = px.histogram(credo_df, x='Loan_Status', color='Married', barmode='group',
                   color_discrete_sequence=px.colors.qualitative.Pastel,
                   title="Loan Status Count by Marriage Status")
fig.update_traces(texttemplate='%{y}', textposition='outside')
fig.update_traces(marker_line_color='black', marker_line_width=1.5)
fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
fig.show()

import plotly.express as px
fig = px.histogram(credo_df, x='Loan_Status', color='Dependents', barmode='group',
                   color_discrete_sequence=px.colors.sequential.Viridis,
                   title="Loan Status Count by Number of Dependents")
fig.update_traces(texttemplate='%{y}', textposition='outside')
fig.update_traces(marker_line_color='black', marker_line_width=1.5)
fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
fig.show()

"""Task 2: Descriptive Analysis

1. Calculating the total amount loaned by AFS
"""

credo_total_loan_amount = credo_df["LoanAmount"].sum()
print("Calculating the total loan amount of AFS is :\n",credo_total_loan_amount)

"""2. Calculating the average amount loaned"""

credo_avg_loan = credo_df["LoanAmount"].mean()
print("The Average loan amount of AFS is:\n", credo_avg_loan)

"""3. Calculation for the average loan term"""

credo_loan_avg_term = credo_df["Loan_Amount_Term"].mean()
print("Calculating the average loan term of AFS:", credo_loan_avg_term)

"""4. The total number of applicants broken down into Approved and Rejected, the number of males and female in each case"""

credo_approaval_loan_applicant=credo_df[credo_df["Loan_Status"]=='Y']
credo_approaval_loan_applicant=credo_approaval_loan_applicant["Loan_Status"].count()
print("Approval loan applicant:\n",credo_approaval_loan_applicant)
credo_rejected_loanapplicant=credo_df[credo_df["Loan_Status"]=='N']
credo_rejected_loanapplicant=credo_rejected_loanapplicant["Loan_Status"].count()
print("Rejected loan applicants:\n",credo_rejected_loanapplicant)

import plotly.express as px
fig = px.histogram(credo_df, x='Loan_Status', color='Gender', barmode='group',
                   color_discrete_sequence=px.colors.sequential.Plasma,
                   title="Loan Status Count by Gender")
fig.update_traces(texttemplate='%{y}', textposition='outside')
fig.update_traces(marker_line_color='black', marker_line_width=1.5)
fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
fig.show()

"""5. The maximum and minimum of amounts loaned"""

import plotly.express as px
labels = ['Maximum of loan amount', 'Minimum of loan amount']
values = [credo_df["LoanAmount"].max(), credo_df["LoanAmount"].min()]
fig = px.pie(names=labels, values=values,
             color=labels, color_discrete_sequence=px.colors.qualitative.Pastel,
             title="Maximum and Minimum Loan Amounts")
fig.update_traces(textinfo='label+value', textfont_size=15,
                  marker=dict(line=dict(color='black', width=2)))
fig.update_layout(showlegend=False)
fig.show()

"""6. The number of self-employed who had their loan approved, expressed as a percentage of all who had their loan approved"""

credo_self_employed=credo_df[credo_df['Self_Employed']==1]
self_employed_credo_approved=credo_self_employed[credo_self_employed['Loan_Status'] == 'Y']
approved_loan=credo_df[credo_df['Loan_Status'] == 'Y']

self_employed_credo_approved_percent = (len(self_employed_credo_approved) / len(approved_loan)) * 100 if len(approved_loan) > 0 else 0
others_applicant_credo = 100 - self_employed_credo_approved_percent

credo_new= {'details_self_employed_credo': ['Approved Loan and Self-employed', 'Other Applicants'], 'percentage_approved_credo': [self_employed_credo_approved_percent, others_applicant_credo]}
percentages = pd.DataFrame(credo_new)

import plotly.express as px
fig = px.bar(percentages,
             x='details_self_employed_credo',
             y='percentage_approved_credo',
             title='The number of self-employed who had their loan approved, expressed as a percentage of all who had their loan approved',
             labels={'details_self_employed_credo': 'Details Self Employed', 'percentage_approved_credo': 'Percentage Approved'},
             color='percentage_approved_credo',
             color_continuous_scale=px.colors.sequential.Viridis)
fig.update_traces(texttemplate='%{y}', textposition='outside')
fig.update_traces(marker_line_color='black', marker_line_width=1.5)
fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide',
                  yaxis_title='Value',
                  xaxis_title='Details Self Employed',
                  height=500, width=700,
                  showlegend=False)
fig.show()

"""7. The income distribution of all main applicants, showing average and standard deviation"""

credo_income=credo_df['ApplicantIncome']
sns.histplot(x=credo_df['ApplicantIncome'], color="Violet", edgecolor='none')
plt.title("Income distribution of main applicants")
plt.axvline(credo_income.mean(), color='red', linestyle='dotted', linewidth=2, label=f'Mean: {credo_income.mean():.2f}')
plt.axvline(credo_income.std(), color='black', linestyle='dotted', linewidth=2, label=f'Std Dev: {credo_income.std():.2f}')
plt.legend()
plt.show()

"""8. The top ten applicants by loan amount"""

credo_df.nlargest(n=10, columns=['LoanAmount'])

"""9. The distribution of properties (rural, urban etc) of all loan applicants"""

Wv=sns.countplot(x ='Property_Area', data = credo_df, palette='summer')
for label in Wv.containers:
    Wv.bar_label(label)